generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ContentTypeEnum {
  TEXT_PLAIN        @map("text/plain")
  TEXT_MARKDOWN     @map("text/markdown")
  IMAGE_IMAGE_BLOCK @map("image/image-block")
  IMAGE_IMAGE       @map("image/image")
  AUDIO_MPEG        @map("audio/mpeg")
  APPLICATION_PDF   @map("application/pdf")
  EXTERN            @map("extern")
  BLOCKLY           @map("blockly")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model LearningObject {
  id                      String                  @id @default(uuid())
  hruid                   String
  uuid                    String // uuid of existing learning objects
  version                 Int
  language                String
  title                   String
  description             String?
  contentType             ContentTypeEnum?
  targetAges              Int[]
  teacherExclusive        Boolean                 @default(false)
  skosConcepts            String[]
  educationalGoals        Json[]                  @db.Json
  copyright               String?
  licence                 String?
  difficulty              Decimal?                @db.Decimal
  estimatedTime           Decimal?                @db.Decimal
  returnValue             Json?                   @db.Json
  available               Boolean                 @default(true)
  createdAt               DateTime?               @default(now()) @db.Timestamp
  updatedAt               DateTime?               @default(now()) @db.Timestamp
  content                 String
  multipleChoice          Json?                   @db.Json // {question:"Here goes the question", answers:[{...}, {...}]}
  canUploadSubmission     Boolean                 @default(false)
  learningObjectsKeywords LearningObjectKeyword[]
  learningPathNodes       LearningPathNode[]

  @@unique([hruid, version, language])
}

model LearningObjectKeyword {
  loId           String
  keyword        String
  learningObject LearningObject @relation(fields: [loId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([loId, keyword])
}

model LearningPathNode {
  id                              String                   @id @default(uuid())
  lpId                            String
  loId                            String
  instruction                     String?
  startNode                       Boolean                  @default(false)
  learningObject                  LearningObject           @relation(fields: [loId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  learningPath                    LearningPath             @relation(fields: [lpId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  learningPathOutgoingTransitions LearningNodeTransition[] @relation("outgoing_transitions")
  learningPathIncomingTransitions LearningNodeTransition[] @relation("incoming_transitions")
  groups                          Group[]
  assignmentSubmissions           AssignmentSubmission[]
}

model LearningNodeTransition {
  id         String            @id @default(uuid())
  fromNodeId String
  nextNodeId String?
  condition  String? //If condition is null => default transition; else: "answer == 0" or "true==true"
  nextNode   LearningPathNode? @relation("incoming_transitions", fields: [nextNodeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  fromNode   LearningPathNode  @relation("outgoing_transitions", fields: [fromNodeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model LearningPath {
  id                String             @id @default(uuid())
  hruid             String
  language          String
  title             String
  description       String?
  image             String?
  createdAt         DateTime?          @default(now()) @db.Timestamp
  updatedAt         DateTime?          @default(now()) @db.Timestamp
  learningPathNodes LearningPathNode[]
  assignments       Assignment[]
  // TODO add creator id 
}

enum ClassRole {
  TEACHER
  STUDENT
}

model User {
  id                String             @id @default(uuid())
  username          String
  email             String             @unique
  password          String
  surname           String
  name              String
  role              ClassRole
  student           Student?
  teacher           Teacher?
  classJoinRequests ClassJoinRequest[]
  messages          Message[]
  discussions       Discussion[]
}

model Student {
  id      String  @id @default(uuid())
  userId  String  @unique
  classes Class[]
  groups  Group[]
  user    User    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Teacher {
  id         String       @id @default(uuid())
  userId     String       @unique
  classes    Class[]
  assignment Assignment[]
  user       User         @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Class {
  id                String             @id @default(uuid())
  name              String             @default("New class")
  students          Student[]
  teachers          Teacher[]
  assignment        Assignment[]
  classJoinRequests ClassJoinRequest[]
}

model ClassJoinRequest {
  id      String @id @default(uuid())
  classId String
  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  class   Class  @relation(fields: [classId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Group {
  id                    String                 @id @default(uuid())
  nodeId                String?
  assignmentId          String
  discussion            Discussion?
  assignmentSubmissions AssignmentSubmission[]
  node                  LearningPathNode?       @relation(fields: [nodeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  assignment            Assignment             @relation(fields: [assignmentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  students              Student[]
}

model Assignment {
  id           String       @id @default(uuid())
  lpId         String
  teacherId    String
  classId      String
  groups       Group[]
  class        Class        @relation(fields: [classId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  teacher      Teacher      @relation(fields: [teacherId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  learningPath LearningPath @relation(fields: [lpId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

enum SubmissionType {
  MULTIPLE_CHOICE
  FILE
}

model AssignmentSubmission {
  id                   String           @id @default(uuid())
  groupId              String
  nodeId               String
  submissionType       SubmissionType?
  submission           Json?
  //fileOriginalName     String?
  //fileName             String?
  //multipleChoiceAnswer Int? // index of the multiple choice answer
  node                 LearningPathNode @relation(fields: [nodeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  group                Group            @relation(fields: [groupId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([groupId, nodeId])
}

model Discussion {
  id       String    @id @default(uuid())
  groupId  String    @unique
  messages Message[]
  members  User[]
  group    Group     @relation(fields: [groupId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Message {
  id         Int        @id @default(autoincrement())
  content    String
  senderId   String
  chatId     String
  sender     User       @relation(fields: [senderId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  discussion Discussion @relation(fields: [chatId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdAt  DateTime   @default(now()) @db.Timestamp
}
