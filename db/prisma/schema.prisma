generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ContentTypeEnum {
  TEXT_PLAIN        @map("text/plain")
  TEXT_MARKDOWN     @map("text/markdown")
  IMAGE_IMAGE_BLOCK @map("image/image-block")
  IMAGE_IMAGE       @map("image/image")
  AUDIO_MPEG        @map("audio/mpeg")
  APPLICATION_PDF   @map("application/pdf")
  EXTERN            @map("extern")
  BLOCKLY           @map("blockly")
}

model LearningObject {
  id                String                  @id @default(uuid())
  hruid             String
  uuid              String // uuid of existing learning objects
  version           Int
  language          String
  title             String
  description       String?
  contentType       ContentTypeEnum?
  contentLocation   String? // contains relevant info if contentType == EXTERN
  targetAges        Int[]
  teacherExclusive  Boolean                 @default(false)
  skosConcepts      String[]
  educationalGoals  Json[]                  @db.Json
  copyright         String?
  licence           String?
  difficulty        Decimal?                @db.Decimal
  estimatedTime     Decimal?                @db.Decimal
  returnValue       Json?                   @db.Json
  available         Boolean                 @default(true)
  createdAt         DateTime?               @default(now()) @db.Timestamp
  updatedAt         DateTime?               @updatedAt @db.Timestamp
  content           String
  multipleChoice    Json?                   @db.Json // {question:"Here goes the question", answers:[{...}, {...}]}
  submissionType    SubmissionType          @default(READ)
  learningPathNodes LearningPathNode[]
  keywords          LearningObjectKeyword[]

  @@unique([hruid, version, language])
}

model LearningObjectKeyword {
  learningObjectId String
  keyword          String
  learningObject   LearningObject @relation(fields: [learningObjectId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([learningObjectId, keyword])
}

model LearningTheme {
  id       String   @id @default(uuid())
  image    String
  title    String
  keywords String[]
}

model LearningPathNode {
  id                    String                   @id @default(uuid())
  learningPathId        String
  learningObjectId      String
  instruction           String?
  index                 Int
  learningObject        LearningObject           @relation(fields: [learningObjectId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  learningPath          LearningPath             @relation(fields: [learningPathId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  transitions           LearningNodeTransition[]
  assignmentSubmissions AssignmentSubmission[]

  @@unique([learningPathId, index])
}

model LearningNodeTransition {
  id                 String           @id @default(uuid())
  learningPathNodeId String
  condition          String? // Condition is null => default transition; condition must have following form: "answer == 0" or "true==true"
  toNodeIndex        Int
  learningPathNode   LearningPathNode @relation(fields: [learningPathNodeId], references: [id])
}

model LearningPath {
  id                String             @id @default(uuid())
  hruid             String
  language          String
  title             String
  description       String?
  image             String?
  ownerId           String?
  createdAt         DateTime?          @default(now()) @db.Timestamp
  updatedAt         DateTime?          @updatedAt @db.Timestamp
  owner             User?              @relation(fields: [ownerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  learningPathNodes LearningPathNode[]
  assignments       Assignment[]
  favorites         Favorite[]

  @@unique([hruid, language])
}

enum ClassRole {
  TEACHER
  STUDENT
}

enum AuthProvider {
  LOCAL
  GOOGLE
}

model User {
  id                String             @id @default(uuid())
  provider          AuthProvider
  username          String
  email             String             @unique
  password          String
  surname           String
  name              String
  role              ClassRole
  student           Student?
  teacher           Teacher?
  classJoinRequests ClassJoinRequest[]
  messages          Message[]
  discussions       Discussion[]
  LearningPaths     LearningPath[]
  favorites         Favorite[]
}

model Student {
  id      String  @id @default(uuid())
  userId  String  @unique
  classes Class[]
  groups  Group[]
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Teacher {
  id         String       @id @default(uuid())
  userId     String       @unique
  classes    Class[]
  assignment Assignment[]
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  Announcement Announcement[]
}

model Class {
  id                String             @id @default(uuid())
  name              String             @default("New class")
  students          Student[]
  teachers          Teacher[]
  assignments       Assignment[]
  classJoinRequests ClassJoinRequest[]
  Announcements     Announcement[]
}

model ClassJoinRequest {
  id      String @id @default(uuid())
  classId String
  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  class   Class  @relation(fields: [classId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Group {
  id                    String                 @id @default(uuid())
  name                  String
  assignmentId          String
  discussion            Discussion?
  assignmentSubmissions AssignmentSubmission[]
  progress              Int[]                  @default([]) // indeces of completed nodes
  currentNodeIndex      Int                    @default(0)
  assignment            Assignment             @relation(fields: [assignmentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  students              Student[]
}

model Assignment {
  id             String       @id @default(uuid())
  name           String
  description    String
  learningPathId String
  teacherId      String
  classId        String
  deadline       DateTime     @db.Timestamp
  groups         Group[]
  class          Class        @relation(fields: [classId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  teacher        Teacher      @relation(fields: [teacherId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  learningPath   LearningPath @relation(fields: [learningPathId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

enum SubmissionType {
  MULTIPLE_CHOICE
  FILE
  READ // When the submission is just reading the content
}

model AssignmentSubmission {
  id             String           @id @default(uuid())
  groupId        String?
  favoriteId     String?
  nodeId         String
  submissionType SubmissionType
  submission     Json?
  node           LearningPathNode @relation(fields: [nodeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  group          Group?           @relation(fields: [groupId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  favorite       Favorite?        @relation(fields: [favoriteId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([groupId, nodeId])
}

model Favorite {
  id                    String                 @id @default(uuid())
  userId                String
  learningPathId        String
  progress              Int[]                  @default([]) // indeces of completed nodes
  learningPath          LearningPath           @relation(fields: [learningPathId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user                  User                   @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  assignmentSubmissions AssignmentSubmission[]
}

model Discussion {
  id       String    @id @default(uuid())
  groupId  String    @unique
  messages Message[]
  members  User[]
  group    Group     @relation(fields: [groupId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Message {
  id           Int        @id @default(autoincrement())
  content      String
  senderId     String
  discussionId String
  sender       User       @relation(fields: [senderId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  discussion   Discussion @relation(fields: [discussionId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  createdAt    DateTime   @default(now()) @db.Timestamp
}

model Announcement {
  id        String   @id @default(uuid())
  title     String
  content   String
  classId   String
  createdAt DateTime @default(now()) @db.Timestamp
  class     Class    @relation(fields: [classId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  teacherId String
  teacher   Teacher  @relation(fields: [teacherId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}
