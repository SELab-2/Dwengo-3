generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum content_type_enum {
  text_plain        @map("text/plain")
  text_markdown     @map("text/markdown")
  image_image_block @map("image/image-block")
  image_image       @map("image/image")
  audio_mpeg        @map("audio/mpeg")
  application_pdf   @map("application/pdf")
  extern
  blockly
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model learning_object {
  hruid                     String
  uuid                      String
  id                        String                     @id @map("_id")
  version                   Int
  language                  String
  title                     String
  description               String?
  content_type              content_type_enum?
  target_ages               Int[]
  teacher_exclusive         Boolean?                   @default(false)
  skos_concepts             String[]
  educational_goals         Json[]                     @db.Json
  copyright                 String?
  licence                   String?
  difficulty                Decimal?                   @db.Decimal
  estimated_time            Decimal?                   @db.Decimal
  return_value              Json?                      @db.Json
  available                 Boolean?                   @default(true)
  content_location          String?
  created_at                DateTime?                  @default(now()) @db.Timestamp(6)
  updated_at                DateTime?                  @default(now()) @db.Timestamp(6)
  learning_objects_keyword  learning_objects_keyword[]
  learning_path_nodes       learning_path_node[]
  learning_path_transitions learning_path_transition[]

  @@unique([hruid, version, language])
}

model learning_objects_keyword {
  lo_id            String
  keyword          String
  learning_objects learning_object @relation(fields: [lo_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([lo_id, keyword])
}

model learning_path_node {
  id                        String                     @id @map("_id")
  lp_id                     String
  lo_hruid                  String
  version                   Int
  language                  String
  instruction               String?
  start_node                Boolean?                   @default(false)
  learning_object           learning_object            @relation(fields: [lo_hruid, language, version], references: [hruid, language, version], onDelete: NoAction, onUpdate: NoAction)
  learning_path             learning_path              @relation(fields: [lp_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  learning_path_transitions learning_path_transition[]
}

model learning_path_transition {
  id                   String             @id @map("_id")
  default              Boolean?           @default(false)
  next_hruid           String
  next_version         Int
  next_language        String
  next_learning_object learning_object    @relation(fields: [next_hruid, next_language, next_version], references: [hruid, language, version], onDelete: NoAction, onUpdate: NoAction)
  from_node_id         String
  condition            String?
  learning_path_nodes  learning_path_node @relation(fields: [from_node_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model learning_path {
  id                  String               @id @map("_id")
  hruid               String               @unique
  language            String
  title               String
  description         String?
  image               String?
  created_at          DateTime?            @default(now()) @db.Timestamp(6)
  updated_at          DateTime?            @default(now()) @db.Timestamp(6)
  learning_path_nodes learning_path_node[]
}
